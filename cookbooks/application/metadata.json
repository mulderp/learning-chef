{
  "name": "application",
  "description": "Deploys and configures a variety of applications",
  "long_description": "Application cookbook\n====================\n\nThis cookbook is designed to be able to describe and deploy web\napplications. It provides the basic infrastructure; other cookbooks\nare required to support specific combinations of frameworks and\napplication servers. The following cookbooks are available at this\ntime:\n\n* application\\_java (Java and Tomcat)\n* application\\_nginx (nginx reverse proxy)\n* application\\_php (PHP with mod\\_php\\_apache2)\n* application\\_python (Django with Gunicorn)\n* application\\_ruby (Rails with Passenger or Unicorn)\n\nBackward compatibility\n----------------------\n\nAs of version 2.0.0 of this cookbook, the recipes using configuration\nstored in the `apps` data bag are fully deprecated and removed.\nVersion 1.0.4 of this cookbook is the last release where these recipes\nwere available.\n\nSee [COOK-1820](http://tickets.opscode.com/browse/COOK-1820).\n\nRequirements\n============\n\nChef 0.10.0 or higher required (for Chef environment use).\n\nThe previous dependencies have been moved out to the\napplication-stack-specific cookbooks, and this cookbook has no\nexternal dependencies.\n\nResources/Providers\n===================\n\nThe `application` LWRP configures the basic properties of most\napplications, regardless of the framework or application server they\nuse. These include:\n\n* SCM information for the deployment, such as the repository URL and\n  branch name;\n* deployment destination, including the filesystem path to deploy to;\n* any OS packages to install as dependencies;\n* optional callback to control the deployment.\n\nThis LWRP uses the `deploy_revision` LWRP to perform the bulk of its\ntasks, and many concepts and parameters map directly to it. Check the\ndocumentation for `deploy_revision` for more information.\n\nConfiguration of framework-specific aspects of the application are\nperformed by invoking a sub-resource; see the appropriate cookbook for\nmore documentation.\n\n# Actions\n\n- `:deploy`: deploy an application, including any necessary\n  configuration, restarting the associated service if necessary\n- `:force_deploy`: same as `:deploy`, but it will send a `:force_deploy`\n  action to the deploy resource, directing it to deploy the\n  application even if the same revision is already deployed\n\n# Attribute Parameters\n\n- `name`: name attribute. The name of the application you are setting\n  up. This will be used to derive the default value for other\n  attribute\n- `packages`: an Array or Hash of packages to be installed before\n  starting the deployment\n- `path`: target path of the deployment; it will be created if it does\n  not exist\n- `owner`: the user that shall own the target path\n- `group`: the group that shall own the target path\n- `strategy`: the underlying LWRP that will be used to perform the\n  deployment. The default is `:deploy_revision`, and it should never\n  be necessary to change it\n- `scm_provider`: the provider class to use for the deployment. It\n  defaults to `Chef::Provider::Git`, you can set it to\n  `Chef::Provider::Subversion` to deploy from an SVN repository\n- `repository`: the URL of the repository the application should be\n  checked out from\n- `revision`: an identifier pointing to the revision that should be\n  checked out\n- `deploy_key`: the private key to use to access the repository via SSH\n- `rollback_on_error`: if true, exceptions during a deployment will be\n  caught and a clean rollback to the previous version will be\n  attempted; the exception will then be re-raised. Defaults to true;\n  change it only if you know what you are doing\n- `environment`: a Hash of environment variables to set while running\n  migrations\n- `purge_before_symlink`: an Array of paths (relative to the checkout)\n  to remove before creating symlinks\n- `create_dirs_before_symlink`: an Array of paths (relative to the\n  checkout) pointing to directories to create before creating symlinks\n- `symlinks`: a Hash of shared/dir/path => release/dir/path. It\n  determines which files and dirs in the shared directory get\n  symlinked to the current release directory\n- `symlink_before_migrate`: similar to symlinks, except that they will\n  be linked before any migration is run\n- `migrate`: if `true` then migrations will be run; defaults to false\n- `migration_command`: a command to run to migrate the application from\n  the previous to the current state\n- `restart_command`: a command to run when restarting the application\n- `environment_name`: the name of a framework-specific \"environment\"\n  (for example the Rails environment). By default it is the same as\n  the Chef environment, unless it is `_default`, in which case it is\n  set to `production`\n- `enable_submodules`: whether to enable git submodules in the deploy,\n  passed into the deploy resource.\n\n# Callback Attributes\n\nYou can also set a few attributes on this LWRP that are interpreted as\ncallback to be called at specific points during a deployment. If you\npass a block, it will be evaluated within a new context. If you pass a\nstring, it will be interpreted as a path (relative to the release\ndirectory) to a file; if it exists, it will be loaded and evaluated as\nthough it were a Chef recipe.\n\nThe following callback attributes are available:\n\n- `before_deploy`: invoked immediately after initial setup and before\n  the deployment proper is started. This callback will be invoked on\n  every Chef run\n- `before_migrate`\n- `before_symlink`\n- `before_restart`\n- `after_restart`\n\n# Sub-resources\n\nAnything that is not a known attribute will be interpreted as the name\nof a sub-resource; the resource will be looked up, and any nested\nattribute will be passed to it. More than one sub-resource can be\nadded to an application; the order is significant, with the latter\nsub-resources overriding any sub-resource that comes before.\n\nSub-resources can set their own values for some attributes; if they\ndo, they will be merged together with the attribute set on the main\nresource. The attributes that support this behavior are the following:\n\n- `environment`: environment variables from the application and from\n  sub-resources will be merged together, with later resources\n  overriding values set in the application or previous resources\n- `migration_command`: commands from the application and from\n  sub-resources will be concatenated together joined with '&&' and run\n  as a single shell command. The migration will only succeed if all\n  the commands succeed\n- `restart_command`: commands from the application and from\n  sub-resources will be evaluated in order\n- `symlink_before_migrate`: will be concatenated as a single array\n- `callbacks`: sub-resources callbacks will be invoked first, followed\n  by the application callbacks\n\nUsage\n=====\n\nTo use the application cookbook we recommend creating a cookbook named\nafter the application, e.g. `my_app`. In `metadata.rb` you should\ndeclare a dependency on this cookbook and any framework cookbook the\napplication may need. For example a Rails application may include:\n\n    depends \"application\"\n    depends \"application_ruby\"\n\nThe default recipe should describe your application using the\n`application` LWRP; you may also include additional recipes, for\nexample to set up a database, queues, search engines and other\ncomponents of your application.\n\nA recipe using this LWRP may look like this:\n\n    application \"my_app\" do\n      path \"/deploy/to/dir\"\n      owner \"app-user\"\n      group \"app-group\"\n\n      repository \"http://git.example.com/my-app.git\"\n      revision \"production\"\n\n      # Apply the rails LWRP from application_ruby\n      rails do\n        # Rails-specific configuration. See the README in the\n        # application_ruby cookbook for more information.\n      end\n\n      # Apply the passenger_apache2 LWRP, also from application_ruby\n      passenger_apache2 do\n        # Passenger-specific configuration.\n      end\n    end\n\nYou can of course use any code necessary to determine the value of\nattributes:\n\n    application \"my_app\" do\n      repository \"http://git.example.com/my-app.git\"\n      revision node.chef_environment == \"production\" ? \"production\" : \"develop\"\n    end\n\nAttributes from the application and from sub-resources are merged\ntogether:\n\n    application \"my_app\" do\n      restart_command \"kill -1 `cat /var/run/one.pid`\"\n      environment \"LC_ALL\" => \"en\", \"FOO\" => \"bar\"\n\n      rails do\n        restart_command \"touch /tmp/something\"\n        environment \"LC_ALL\" => \"en_US\"\n      end\n\n      passenger_apache2 do\n        environment \"FOO\" => \"baz\"\n      end\n    end\n\n    # at the end, you will have:\n    #\n    # restart_command #=> kill -1 `cat /var/run/one.pid` && touch /tmp/something\n    # environment #=> LC_ALL=en_US FOO=baz\n\nMost databases have the concept of migrations (or you can just use\nyour own):\n\n    application \"my_app\" do\n      path \"/deploy/to/dir\"\n      owner \"app-user\"\n      group \"app-group\"\n\n      repository \"http://git.example.com/my-app.git\"\n      revision \"production\"\n\n      php do\n        migrate true\n        migration_command \"your-applications-migrate-command\"\n      end\n    end\n\nThis will run `your-applications-migrate-command`, with the current\ndirectory set to the directory of the current checkout.\n\nTo use the application cookbook, we recommend creating a role named\nafter the application, e.g. `my_app`. Create a Ruby DSL role in your\nchef-repo, or create the role directly with knife.\n\n    % knife role show my_app -Fj\n    {\n      \"name\": \"my_app\",\n      \"chef_type\": \"role\",\n      \"json_class\": \"Chef::Role\",\n      \"default_attributes\": {\n      },\n      \"description\": \"\",\n      \"run_list\": [\n        \"recipe[my_app]\"\n      ],\n      \"override_attributes\": {\n      }\n    }\n\nLicense and Author\n==================\n\n- Author: Adam Jacob (<adam@opscode.com>)\n- Author: Andrea Campi (<andrea.campi@zephirworks.com.com>)\n- Author: Joshua Timberman (<joshua@opscode.com>)\n- Author: Noah Kantrowitz  (<noah@opscode.com>)\n- Author: Seth Chisamore (<schisamo@opscode.com>)\n\n- Copyright 2009-2012, Opscode, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "Opscode, Inc.",
  "maintainer_email": "cookbooks@opscode.com",
  "license": "Apache 2.0",
  "platforms": {
  },
  "dependencies": {
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "application": "Empty placeholder recipe, use the LWRPs, see README.md."
  },
  "version": "2.0.0"
}